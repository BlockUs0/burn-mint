# Phoenix NFT Burning dApp Development Prompt

## Project Overview
Create a web3 dApp for NFT burning and minting with React + Vite on Replit, focusing on clean state management and user experience.

## Core Technical Stack
- React + Vite
- viem for Web3 interactions
- TypeScript
- Tailwind CSS

## Key Features Phase 1 (Current Focus)
1. Wallet Connection
2. NFT Display
3. Burn Button Enabling
4. State Management

## API Integration
```typescript
// Available Routes
POST /v1/burns/register    // Register burn transaction
GET /v1/burns             // Query burns with pagination
GET /v1/burns/:id         // Get specific burn

// Response Types
interface BurnPaginatedResponse {
  data: BurnRecord[];
  pagination: {
    limit: number;
    page: number;
    total: number;
  };
}

interface BurnQueryDto {
  skip?: number;
  take?: number;
  limit: number;
  page?: number;
}
```

## State Management Requirements
1. Wallet States:
```typescript
type WalletState = {
  status: 'disconnected' | 'connecting' | 'connected' | 'error';
  address: string | null;
  error?: Error;
};
```

2. NFT Display States:
```typescript
type NFTDisplayState = {
  loading: boolean;
  error: Error | null;
  nfts: NFT[];
  selectedNFT: string | null;
};
```

3. Burn States:
```typescript
type BurnState = {
  status: 'idle' | 'burning' | 'completed' | 'error';
  burnCount: number;
  canMint: boolean;
};
```

## Component Structure
```
src/
├── components/
│   ├── WalletConnection/
│   │   ├── WalletButton.tsx
│   │   └── NetworkSwitch.tsx
│   ├── NFTDisplay/
│   │   ├── NFTGrid.tsx
│   │   └── NFTCard.tsx
│   └── BurnInterface/
│       ├── BurnButton.tsx
│       └── BurnProgress.tsx
├── hooks/
│   ├── useWallet.ts
│   ├── useNFTs.ts
│   └── useBurnState.ts
├── services/
│   ├── api.ts
│   └── web3.ts
└── types/
    └── index.ts
```

## Implementation Requirements

### 1. Wallet Connection
- Handle connection/disconnection gracefully
- Show appropriate error messages
- Network detection and switching (Arbitrum)
- Persist connection state

### 2. NFT Display
- Grid layout with responsive design
- Loading states with skeletons
- Error handling with retry options
- Empty state handling
- Pagination support

### 3. Burn Interface
- Single NFT selection
- Clear feedback on burn status
- Transaction confirmation
- Error recovery
- Progress tracking

## Error States to Handle
1. Wallet Connection:
   - No wallet detected
   - Wrong network
   - Connection rejected
   - Disconnection

2. NFT Loading:
   - API timeout
   - Contract read errors
   - No NFTs found
   - Network issues

3. Burn Process:
   - Transaction rejected
   - Network congestion
   - Contract errors
   - API failures

## Development Process
1. Setup Replit environment
2. Initialize project with Vite
3. Install dependencies
4. Setup GitHub integration
5. Implement core components
6. Add state management
7. Integrate API calls
8. Add error handling
9. Polish UI/UX

## Testing Requirements
- Wallet connection flows
- NFT loading states
- Error handling
- Burn functionality
- API integration

## Next Steps
1. Initialize the project in Replit
2. Set up GitHub repository
3. Create basic component structure
4. Implement wallet connection
5. Add NFT display grid
6. Integrate burn functionality

Would you like to proceed with any specific part of the implementation?